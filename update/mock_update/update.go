// Code generated by MockGen. DO NOT EDIT.
// Source: update.go

// Package mock_update is a generated GoMock package.
package mock_update

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	update "github.com/konoui/go-alfred/update"
)

// MockUpdaterSource is a mock of UpdaterSource interface.
type MockUpdaterSource struct {
	ctrl     *gomock.Controller
	recorder *MockUpdaterSourceMockRecorder
}

// MockUpdaterSourceMockRecorder is the mock recorder for MockUpdaterSource.
type MockUpdaterSourceMockRecorder struct {
	mock *MockUpdaterSource
}

// NewMockUpdaterSource creates a new mock instance.
func NewMockUpdaterSource(ctrl *gomock.Controller) *MockUpdaterSource {
	mock := &MockUpdaterSource{ctrl: ctrl}
	mock.recorder = &MockUpdaterSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdaterSource) EXPECT() *MockUpdaterSourceMockRecorder {
	return m.recorder
}

// IfNewerVersionAvailable mocks base method.
func (m *MockUpdaterSource) IfNewerVersionAvailable(arg0 string) update.Updater {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IfNewerVersionAvailable", arg0)
	ret0, _ := ret[0].(update.Updater)
	return ret0
}

// IfNewerVersionAvailable indicates an expected call of IfNewerVersionAvailable.
func (mr *MockUpdaterSourceMockRecorder) IfNewerVersionAvailable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IfNewerVersionAvailable", reflect.TypeOf((*MockUpdaterSource)(nil).IfNewerVersionAvailable), arg0)
}

// NewerVersionAvailable mocks base method.
func (m *MockUpdaterSource) NewerVersionAvailable(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewerVersionAvailable", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewerVersionAvailable indicates an expected call of NewerVersionAvailable.
func (mr *MockUpdaterSourceMockRecorder) NewerVersionAvailable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewerVersionAvailable", reflect.TypeOf((*MockUpdaterSource)(nil).NewerVersionAvailable), arg0)
}

// MockUpdater is a mock of Updater interface.
type MockUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockUpdaterMockRecorder
}

// MockUpdaterMockRecorder is the mock recorder for MockUpdater.
type MockUpdaterMockRecorder struct {
	mock *MockUpdater
}

// NewMockUpdater creates a new mock instance.
func NewMockUpdater(ctrl *gomock.Controller) *MockUpdater {
	mock := &MockUpdater{ctrl: ctrl}
	mock.recorder = &MockUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdater) EXPECT() *MockUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockUpdater) Update(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUpdaterMockRecorder) Update(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUpdater)(nil).Update), ctx)
}

// MockUpdaterSourceOption is a mock of UpdaterSourceOption interface.
type MockUpdaterSourceOption struct {
	ctrl     *gomock.Controller
	recorder *MockUpdaterSourceOptionMockRecorder
}

// MockUpdaterSourceOptionMockRecorder is the mock recorder for MockUpdaterSourceOption.
type MockUpdaterSourceOptionMockRecorder struct {
	mock *MockUpdaterSourceOption
}

// NewMockUpdaterSourceOption creates a new mock instance.
func NewMockUpdaterSourceOption(ctrl *gomock.Controller) *MockUpdaterSourceOption {
	mock := &MockUpdaterSourceOption{ctrl: ctrl}
	mock.recorder = &MockUpdaterSourceOptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdaterSourceOption) EXPECT() *MockUpdaterSourceOptionMockRecorder {
	return m.recorder
}

// setCheckInterval mocks base method.
func (m *MockUpdaterSourceOption) setCheckInterval(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setCheckInterval", arg0)
}

// setCheckInterval indicates an expected call of setCheckInterval.
func (mr *MockUpdaterSourceOptionMockRecorder) setCheckInterval(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setCheckInterval", reflect.TypeOf((*MockUpdaterSourceOption)(nil).setCheckInterval), arg0)
}
